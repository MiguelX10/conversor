console.log('üö® TEST CONVERTER CARGADO')

import { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType, LevelFormat, convertInchesToTwip } from 'docx'

export class TestConverter {
  constructor() {
    console.log('üö® TEST CONVERTER CONSTRUCTOR')
  }

  async convertFile(file: File): Promise<Blob> {
    console.log('üö® TEST CONVERTER - convertFile llamado')
    console.log('üö® Archivo:', file.name, file.size, 'bytes')

    // Crear un documento Word simple con contenido fijo
    const testText = `DOCUMENTO DE PRUEBA

Archivo original: ${file.name}
Tama√±o: ${(file.size / 1024).toFixed(1)} KB
Fecha: ${new Date().toLocaleString('es-ES')}

CONTENIDO DE PRUEBA:
Este es un documento Word generado con texto fijo para verificar que el proceso funciona correctamente.

Si ves este texto en lugar del c√≥digo PDF, significa que el problema est√° en la extracci√≥n del PDF, no en la generaci√≥n del Word.

PR√ìXIMOS PASOS:
1. Verificar que este Word se descarga correctamente
2. Confirmar que no contiene c√≥digo PDF
3. Implementar extracci√≥n real del PDF`

    const paragraphs = testText.split('\n').map(line =>
      new Paragraph({
        children: [
          new TextRun({
            text: line.trim(),
            size: 22,
          }),
        ],
        spacing: { after: 120 },
      })
    )

    const doc = new Document({
      sections: [{
        properties: {},
        children: paragraphs,
      }],
    })

    console.log('üö® Generando blob...')
    const blob = await Packer.toBlob(doc)
    console.log('üö® Blob generado:', blob.size, 'bytes')

    return blob
  }

  async createWordFromText(text: string, fileName: string): Promise<Blob> {
    console.log('üö® createWordFromText llamado')
    console.log('üö® Texto recibido (primeros 300 chars):', text.substring(0, 300))
    console.log('üö® Longitud total del texto:', text.length)

    console.log('üö® Usando texto extra√≠do directamente (sin filtros)')

    // Limpiar texto extra√≠do para mejorar formato (preservando saltos de l√≠nea)
    text = text
      .replace(/ +/g, ' ')  // M√∫ltiples espacios a uno, pero preservar \n
      .replace(/([a-z])([A-Z])/g, '$1 $2')  // Espacios entre palabras pegadas
      .trim()

    // Procesar l√≠neas con formato estructural
    const lines = text.split('\n').filter(line => line.trim().length > 0)
    console.log(`üö® Procesando ${lines.length} l√≠neas con formato`)
    console.log(`üö® Primeras 5 l√≠neas:`, lines.slice(0, 5))

    const paragraphs: Paragraph[] = []
    let listLevel = 0

    for (const line of lines) {
      const trimmedLine = line.trim()
      if (!trimmedLine) continue

      // Parsear marcadores de formato: TIPO|||TEXTO
      const parts = trimmedLine.split('|||')
      const elementType = parts[0] || 'PARAGRAPH'
      const elementText = parts[1] || trimmedLine

      console.log(`üîç Procesando: ${elementType} - ${elementText.substring(0, 50)}...`)

      switch (elementType) {
        case 'HEADING1':
          paragraphs.push(new Paragraph({
            children: [
              new TextRun({
                text: elementText,
                bold: true,
                size: 32,
              }),
            ],
            heading: HeadingLevel.HEADING_1,
            alignment: AlignmentType.CENTER,
            spacing: { before: 400, after: 300 },
          }))
          break

        case 'HEADING2':
          paragraphs.push(new Paragraph({
            children: [
              new TextRun({
                text: elementText,
                bold: true,
                size: 26,
              }),
            ],
            heading: HeadingLevel.HEADING_2,
            spacing: { before: 300, after: 200 },
          }))
          break

        case 'LIST_NUM':
          // Remover n√∫mero del inicio si existe
          const cleanedNumText = elementText.replace(/^\d+\.\s*/, '')
          paragraphs.push(new Paragraph({
            children: [
              new TextRun({
                text: cleanedNumText,
                size: 22,
              }),
            ],
            numbering: {
              reference: 'numbered-list',
              level: 0,
            },
            spacing: { after: 120 },
          }))
          break

        case 'LIST_BULLET':
          // Remover s√≠mbolo del inicio si existe
          const cleanedBulletText = elementText.replace(/^[‚Ä¢¬∑‚ñ™‚ñ´-]\s*/, '')
          paragraphs.push(new Paragraph({
            children: [
              new TextRun({
                text: cleanedBulletText,
                size: 22,
              }),
            ],
            bullet: {
              level: 0,
            },
            spacing: { after: 120 },
          }))
          break

        default: // PARAGRAPH
          paragraphs.push(new Paragraph({
            children: [
              new TextRun({
                text: elementText,
                size: 22,
              }),
            ],
            spacing: { after: 120 },
          }))
          break
      }
    }

    const doc = new Document({
      numbering: {
        config: [{
          reference: 'numbered-list',
          levels: [{
            level: 0,
            format: LevelFormat.DECIMAL,
            text: '%1.',
            alignment: AlignmentType.START,
            style: {
              paragraph: {
                indent: { left: convertInchesToTwip(0.5), hanging: convertInchesToTwip(0.25) },
              },
            },
          }],
        }],
      },
      sections: [{
        properties: {
          page: {
            margin: {
              top: convertInchesToTwip(1),
              right: convertInchesToTwip(1),
              bottom: convertInchesToTwip(1),
              left: convertInchesToTwip(1),
            },
          },
        },
        children: paragraphs,
      }],
    })

    console.log('üö® Generando blob final...')
    const blob = await Packer.toBlob(doc)
    console.log('üö® Blob final generado:', blob.size, 'bytes')

    return blob
  }
}